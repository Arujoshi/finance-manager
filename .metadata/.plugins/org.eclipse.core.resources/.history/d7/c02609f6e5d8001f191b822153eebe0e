package com.finance.service;

import com.finance.dto.ExpenseDTO;
import com.finance.dto.UserDTO;
import com.finance.exception.ExpenseNotFoundException;
import com.finance.mappper.UserInfoMapper;
import com.finance.model.Expense;
import com.finance.model.UserInfo;
import com.finance.repository.ExpenseRepository;
import com.finance.repository.UserInfoRepository;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@Service
public class ExpenseService {
	
    @Autowired
    private ExpenseRepository expenseRepository;
    
    @Autowired
    private UserInfoRepository userRepository;

    public List<ExpenseDTO> getExpensesByUserId(Long userId) {
    	List<Expense> expenses = expenseRepository.findByUserUserId(userId);

        // Map each Expense to ExpenseDTO and UserInfo to UserDTO
        return expenses.stream()
                .map(expense -> {
                    // Map UserInfo to UserDTO (only non-sensitive fields)
                    UserDTO userDTO = new UserDTO(expense.getUser().getUserId(),
                                                  expense.getUser().getName(),
                                                  expense.getUser().getEmail(),
                                                  expense.getUser().getPhone());

                    // Map Expense to ExpenseDTO
                    return new ExpenseDTO(expense.getId(), expense.getCategory(), expense.getAmount(),
                                          expense.getDate(), expense.getDescription(), userDTO);
                })
                .collect(Collectors.toList());
    }
    
    public ExpenseDTO addExpense(Expense expense) {
        // Fetch the UserInfo by ID, do not expose sensitive data
        UserInfo userInfo = userRepository.findById(expense.getUser().getUserId())
                .orElseThrow(() -> new RuntimeException("User not found"));

        // Set the UserInfo reference on the expense
        expense.setUser(userInfo);

        // Save the expense, including the reference to the UserInfo entity
        Expense savedExpense = expenseRepository.save(expense);

        // Map UserInfo to UserDTO
        UserDTO userDTO = new UserDTO(savedExpense.getUser().getUserId(),
                                      savedExpense.getUser().getName(),
                                      savedExpense.getUser().getEmail(),
                                      savedExpense.getUser().getPhone());

        // Return the ExpenseDTO with non-sensitive data
        return new ExpenseDTO(savedExpense.getId(), savedExpense.getCategory(), savedExpense.getAmount(),
                              savedExpense.getDate(), savedExpense.getDescription(), userDTO);
    }
    public ExpenseDTO deleteExpense(Long expenseId) throws ExpenseNotFoundException {
        // Find the expense by ID, or throw an exception if not found
        Expense expense = expenseRepository.findById(expenseId)
                .orElseThrow(() -> new ExpenseNotFoundException("Expense not found with id: " + expenseId));

        // Convert the user info to UserDTO (to avoid sensitive data exposure)
        UserDTO userDTO = new UserDTO(expense.getUser().getUserId(),
                                      expense.getUser().getName(),
                                      expense.getUser().getEmail(),
                                      expense.getUser().getPhone());

        // Map Expense to ExpenseDTO
        ExpenseDTO expenseDTO = new ExpenseDTO(expense.getId(), expense.getCategory(),
                                               expense.getAmount(), expense.getDate(),
                                               expense.getDescription(), userDTO);

        // Delete the expense
        expenseRepository.deleteById(expenseId);

        // Return the ExpenseDTO (without sensitive user data)
        return expenseDTO;
    }

    
    public ExpenseDTO updateExpense(Long expenseId, Expense expense) throws ExpenseNotFoundException {
        // Find the existing expense by ID
        Optional<Expense> getExpense = expenseRepository.findById(expenseId);

        if (getExpense.isPresent()) {
            Expense existingExpense = getExpense.get();

            // Update the expense fields
            existingExpense.setAmount(expense.getAmount());
            existingExpense.setCategory(expense.getCategory());
            existingExpense.setDate(expense.getDate());
            existingExpense.setDescription(expense.getDescription());

            // Ensure the user reference is handled appropriately
            // You may need to validate or handle user updates separately if needed
            existingExpense.setUser(expense.getUser());

            // Save the updated expense
            expenseRepository.save(existingExpense);

            // Convert UserInfo to UserDTO (so we donâ€™t expose sensitive data)
            UserDTO userDTO = new UserDTO(existingExpense.getUser().getUserId(),
                                          existingExpense.getUser().getName(),
                                          existingExpense.getUser().getEmail(),
                                          existingExpense.getUser().getPhone());

            // Return the updated expense as an ExpenseDTO
            return new ExpenseDTO(existingExpense.getId(), existingExpense.getCategory(),
                                  existingExpense.getAmount(), existingExpense.getDate(),
                                  existingExpense.getDescription(), userDTO);
        } else {
            throw new ExpenseNotFoundException("Expense not found with id: " + expenseId);
        }
    }

}

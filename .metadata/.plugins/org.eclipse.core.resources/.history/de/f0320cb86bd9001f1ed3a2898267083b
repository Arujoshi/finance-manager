package com.finance.service;

import org.springframework.stereotype.Service;

import com.finance.dto.BudgetDTO;
import com.finance.mappper.BudgetMapper;
import com.finance.model.Budget;
import com.finance.model.UserInfo;
import com.finance.repository.BudgetRepository;
import com.finance.repository.ExpenseRepository;
import com.finance.repository.UserInfoRepository;

@Service
public class BudgetService {

    private final BudgetRepository budgetRepository;
    private final UserInfoRepository userRepository;
    private final ExpenseRepository expenseRepository;

    public BudgetService(BudgetRepository budgetRepository, UserInfoRepository userRepository, ExpenseRepository expenseRepository) {
        this.budgetRepository = budgetRepository;
        this.userRepository = userRepository;
        this.expenseRepository = expenseRepository;
    }

    public BudgetDTO addBudget(Budget budget) {
        UserInfo user = userRepository.findById(budget.getUser().getUserId())
                .orElseThrow(() -> new RuntimeException("User not found"));

        budget.setUser(user);
        return BudgetMapper.toDTO(budgetRepository.save(budget));
    }

    public List<BudgetDTO> getBudgetsByUserId(Long userId) {
        return budgetRepository.findByUserUserId(userId)
                .stream()
                .map(BudgetMapper::toDTO)
                .collect(Collectors.toList());
    }

    public BudgetDTO updateBudget(Long budgetId, BudgetDTO budgetDTO) {
        Budget budget = budgetRepository.findById(budgetId)
                .orElseThrow(() -> new RuntimeException("Budget not found"));

        budget.setCategory(budgetDTO.getCategory());
        budget.setBudgetAmount(budgetDTO.getBudgetAmount());
        return BudgetMapper.toDTO(budgetRepository.save(budget));
    }

    public void deleteBudget(Long budgetId) {
        if (!budgetRepository.existsById(budgetId)) {
            throw new RuntimeException("Budget not found");
        }
        budgetRepository.deleteById(budgetId);
    }

    public Double calculateSpentAmountForCategory(Long userId, String category) {
        List<Expense> expenses = expenseRepository.findByUserUserIdAndCategory(userId, category);
        return expenses.stream()
                .mapToDouble(Expense::getAmount)
                .sum();
    }

    public BudgetDTO getBudgetWithSpentAmount(Long userId, String category) {
        Optional<Budget> budgetOpt = budgetRepository.findByUserUserId(userId).stream()
                .filter(budget -> budget.getCategory().equalsIgnoreCase(category))
                .findFirst();

        if (budgetOpt.isEmpty()) {
            throw new RuntimeException("Budget not found for category: " + category);
        }

        Budget budget = budgetOpt.get();
        Double spentAmount = calculateSpentAmountForCategory(userId, category);

        BudgetDTO budgetDTO = BudgetMapper.toDTO(budget);
        budgetDTO.setSpentAmount(spentAmount);
        return budgetDTO;
    }
}
